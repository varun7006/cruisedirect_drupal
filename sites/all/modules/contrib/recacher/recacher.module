<?php

/**
 * @file
 * Basic functions for this module.
 */

/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the test_module module
 */
function recacher_permission() {
  return array(
  'administer recacher' => array(
    'title' => t('Administer Recacher'),
    'description' => t('Set roles that may access the settings of Recacher.'),
    ),
  );
}

/**
 * Display help and module integration
 * Implements hook_help().
 * @param path which path of the site we're displaying help
 * @param arg array that holds the current path as would be returned from arg() function
 * @return help text for the path
 */
function recacher_help($path, $arg) {
  if ($path == 'admin/help#recacher') {
    $output = file_get_contents(drupal_get_path('module', 'recacher') . '/README.txt');
    return nl2br($output);
  }
}

/**
 * Menu for this module
 * @return array An array with this module's settings.
 */
function recacher_menu() {
  $items = array();

  $items['admin/config/system/recacher'] = array(
    'title' => 'Recacher',
    'description' => 'Configure Recacher module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('recacher_admin'),
    'access arguments' => array('administer recacher'),
    //'type' => MENU_NORMAL_ITEM,  // Not necessary since this is the default.
    'weight' => 0,
    'file' => 'recacher_settings.inc',
  );

  // For the default local task, we need very little configuration, as the
  // callback and other conditions are handled by the parent callback.
  $items['admin/config/system/recacher/settings'] = array(
    'title' => 'Settings',
    //'description' => 'General settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
    'access arguments' => array('administer recacher'),
  );

  // A shortcut to the permissions settings for this module.
  $items['admin/config/system/recacher/permissions'] = array(
    'title' => 'Permissions',
    'description' => 'Configure access permissions',
    'page callback' => 'recacher_perms',
    'access arguments' => array('administer recacher'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
    'file' => 'recacher_settings.inc',
  );

  $items['admin/config/system/recacher/crawl'] = array(
    'title' => 'Re-cache now',
    'description' => 'Don\'t wait for the cron to run; warm caches of the expired pages immediately.',
    'page callback' => 'recacher_crawler_run',
    'access arguments' => array('administer recacher'),
    'type' => MENU_CALLBACK,
    'weight' => 9,
    'file' => 'recacher_settings.inc',
  );

  return $items;
}

/**
 * Implements hook_cron().
 *
 */
function recacher_cron() {

  $defaultcroninterval = variable_get('recacher_cron_interval', 'default');
  if (is_numeric($defaultcroninterval)) {
    // If a number of minutes was specified
    $interval = 60*variable_get('recacher_cron_interval', 'default'); // $interval must contain value in seconds.
    // We don't want to act every time cron runs (which could be every minute) so keep a time for the next run in a variable.
    if (REQUEST_TIME >= variable_get('recacher_cron_next_execution', 0)) {

      // Important to set it before the job because if they take long and there is another cron triggered...
      variable_set('recacher_cron_next_execution', REQUEST_TIME + $interval);

    }
    else {
      // We must wait some more before this cron can be executed.
      //dpm('recacher_cron not running because the time elapsed is shorter than the set cron interval');
      return;
    }
  }
  else {
    // If no number is set (set to 'default'), then we should void the execution time pointer.
    variable_set('recacher_cron_next_execution', 0);
  }

  // Go recachin'
  recacher_crawler();

}

/**
 * Implements hook_expire_cache().
 *
 * Provides integration with the Cache Expiration (expire) module.
 */
function recacher_expire_cache($urls, $wildcards, $object_type, $object) {
  // Trigger hook_recacher_urls_alter().
  // Let other modules alter options and headers sent via HTTPRL.
  drupal_alter('recacher_urls', $urls, $wildcards, $object_type, $object);

  // Keep track of whether something is being queued.
  // @see recacher_exit().
  $queued = &drupal_static(__FUNCTION__);

  foreach ($urls as $url) {
    db_merge('recacher')
      ->key(array('hash' => md5($url)))
      ->fields(array(
        'url' => $url,
      ))
      ->expression('expirations', 'expirations + :inc', array(':inc' => 1))
      ->execute();

    // Leave a note for recacher_exit() that there are URLs to be crawled.
    $queued = TRUE;
  }
}

/**
 * Re-cache expired URLs.
 *
 * Uses a lock to prevent concurrent execution.
 *
 * @return int
 *   Returns the number of URLs that were crawled, zero if none.
 */
function recacher_crawler($trimqueue = TRUE) {
  global $base_url;    
  if (lock_acquire(__FUNCTION__)) {
    // ORDER BY expirations, descending, so that the most expired URLs are
    // scanned first.
    $dburls = db_select('recacher', 'r')
      ->fields('r', array('hash', 'url'))
      // ->condition('nid', $nidhere, '=')
      ->orderBy('expirations', 'DESC')
      ->execute()
      ->fetchAllKeyed();

    // Only continue if there any URLs found.
    if (empty($dburls)) {
      if (variable_get('recacher_watchdog') <> 'none') {
        watchdog('Recacher', 'No URLs needed to be crawled.', array(), WATCHDOG_INFO);
      }
      lock_release(__FUNCTION__);
      return 0;
    }

    // Enforce the limit (if set) of how many expired URLs to re-cache
    $max_urls = intval(variable_get('recacher_max_urls', ''));
    if (!empty($max_urls)) {
      $chunks = array_chunk($dburls, $max_urls, TRUE);
      $dburls = $chunks[0];
    }

    // Default HTTP request options for anonymous users.
    $recacher_role_options['anonymous'] = array(
      'timeout' => 90,
      // We are using BLOCKING requests so as not to strain the target website
      // with parallel requests for uncached URLs. And also to be able to
      // determine whether the request was successful or not!
      'blocking' => TRUE,
      // Accept-Encoding is crucial - this is how most browsers, but also
      // GoogleBot, request content.
      // If we leave it out, most browsers would still find the cache cold!
      'headers' => array('Accept-Encoding' => 'gzip'),
    );

    // Trigger hook_recacher_role_options_alter().
    // Let other modules alter options and headers sent via HTTPRL.
    drupal_alter('recacher_role_options', $recacher_role_options);

    // Test if there are any modules implementing hook_recacher_role_options().
    // Without this test, no implementations would empty variable $recacher_role_options.
    if (sizeof(module_implements('recacher_role_options')) > 0) {
      // Trigger hook_recacher_role_options().
      $recacher_role_options = module_invoke_all('recacher_role_options', $recacher_role_options);
    }

    foreach ($dburls as $dburl) {
      if (strpos($dburl, $base_url) !== false){
        $dburl = $dburl;
      }else{
        $dburl = $base_url.'/'.$dburl;
      }  
      foreach ($recacher_role_options as $role => $options) {
        // Queue up the request.
        httprl_request($dburl, $options);
      }
    }

    // Execute request.
    $request = httprl_send_request();

    $codes = array();
    foreach ($request as $url => $probe) {
      $codes[$url] = $probe->code;
    }

    if (variable_get('recacher_watchdog') <> 'none') {
      $someerror = FALSE;
      // Report success and issue a warning for URLs that did not return code 200.
      $messages = array();
      foreach ($dburls as $dburl) {
        if (strpos($dburl, $base_url) !== false){
            $dburl = $dburl;
        }else{
            $dburl = $base_url.'/'.$dburl;
        }          
        if ($codes[$dburl] <> 200) {
          $success = t('UNsuccessful');
          $someerror = TRUE;
        }
        else {
          $success = t('successful');
        }
        if ($codes[$dburl] == 200 AND variable_get('recacher_watchdog') == 'only unsuccessful') continue; // If not required, don't show successfully re-cached URLs.
        $messages[] = '<li>' . $success . ' (' . $codes[$dburl] . '): ' . $dburl . '</li>';
      }
      if (!empty($messages)) {
        $messages = '<ul>' . implode('', $messages) . '</ul>';
        $boodschap = t('Attempted re-caching the following URLs:') . '</br>' . $messages;
        if ($someerror === FALSE) {
          watchdog('Recacher', $boodschap, NULL, WATCHDOG_INFO);
        }
        else {
          // If there is at least one unsuccessful re-caching, elevate the
          // watchdog reporting level.
          watchdog('Recacher', $boodschap, NULL, WATCHDOG_WARNING);
        }
      }
    }

    // If this function is triggered by hook_exit(), do NOT delete the URLs we
    // cached from the queue. See https://www.drupal.org/node/2828873
    if ($trimqueue) {
      // Delete all URLs we've attempted to re-cache from the db table.
      $hashes = array_keys($dburls);
      $query = db_delete('recacher')
        ->condition('hash', $hashes, 'IN')
        ->execute();
    }

    // End the lock.
    lock_release(__FUNCTION__);
    return count($dburls);
  }
}

/**
 * Implements hook_exit().
 *
 * Optionally trigger the crawler at the end of the page execution.
 */
function recacher_exit($destination = NULL) {
  // See if this option is enabled.
  if (variable_get('recrawler_hook_exit', FALSE)) {
    // Check to see if anything was queued.
    $queued = &drupal_static('recacher_expire_cache');
    if ($queued) {
      recacher_crawler(FALSE); // Set to FALSE not to delete re-cached URLs from queue.
    }
  }
}
